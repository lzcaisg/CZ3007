package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short TRUE = 6;
		static public final short FALSE = 7;
		static public final short INT_LITERAL = 8;
		static public final short RPAREN = 9;
		static public final short INT = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short LCURLY = 13;
		static public final short SEMICOLON = 14;
		static public final short RCURLY = 15;
		static public final short IF = 16;
		static public final short WHILE = 17;
		static public final short RETURN = 18;
		static public final short BREAK = 19;
		static public final short RBRACKET = 20;
		static public final short COMMA = 21;
		static public final short PLUS = 22;
		static public final short TIMES = 23;
		static public final short DIV = 24;
		static public final short MOD = 25;
		static public final short EQL = 26;
		static public final short MODULE = 27;
		static public final short ELSE = 28;
		static public final short PUBLIC = 29;
		static public final short TYPE = 30;
		static public final short IMPORT = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LEQ = 34;
		static public final short GEQ = 35;
		static public final short LT = 36;
		static public final short GT = 37;
	}
	static public class AltGoals {
		static public final short Dummy = 38;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDbWTqL4KKXl$tiYbBI8D00Y5423500Z586i644X6D0WeMK56n8693GK4iW4J40c8N8XW" +
		"mTZmK1SKk0afJUf5g40K5fOEKw$$UJXvlzsMp1mMFUyutzywzT#xCpfi6wEbu7aCm73VY8J" +
		"o2ONWOVV4ANiBBw80CsOBpSJ6wur97r5jML2$$KI9ML70rkNGhoYNJ$EOwOKMrnDj#SrrdH" +
		"ONWMYjgC7hYNjoCWRW6J#5AN8L2ZC4ud8VyQdm5rVWw#lLTwDTJxDVJpSjpf#cnMovmMBgO" +
		"bZwunRJSZjjyvc6myboFAxpQzN1akjfXkTMq#6IK3xnY1ZXQFU2mZAWgJy1wIS28K8nqsCB" +
		"m64PXD9x4utZYbFiCLA#SpO7eZTOo0tUZJFx0M9o3ChYHYLOurxFkv6Ur$YQPt$KcrQuCur" +
		"43DP6BS4n13ffxHMMPvMG4uLKCmdsutrFABho0$kojH7RZMQamwv5IWIX4e3R748rQY44fO" +
		"X776Ib57TH58X8GZmPeXCQeXoGqmTceZsIae2bIPJhIaOPcQ277aOTiD4GRjCDPQ8ztq1QT" +
		"q5cseWWNuHBkewwu0PVXSfu7Tw0V#kCk#H3tq3QKFJ#8Hp41J#CPF2VRyI8coZQyXjVn1jx" +
		"4ktWFG3aqxkiWk13CdHZAxwDp1i8v1n4SVnJ77iFHrtP49LfHzQk9WXMLK4rKUokg0tTGu5" +
		"m5t8t#ehAjg1gSgSgeLCvgCtxDDCvh2vvB6LmHdjNG#WpuJe$dL2oT7FDmCZRo7#RspUW#J" +
		"Na2rLq18yAvVtnjqTmTnbvAvavAEUK#0zNj$weDzt4THXWnxLWsu1rJn1lCi#xSIdg#QsKx" +
		"ZITA3DTXFbTZGsPEy8hob94y0N9vGiJpFF2Kdb6urOoupJAHCeGjDOuXbECBesp8YBgKIIm" +
		"RSnxYE1D6V3pd8efvwz4NmKont4CHR5cVzoBCVCbcFOKnIOmq#ZBsV0DgsTHpQ8yqCyNIaa" +
		"MPHLiMiyLIpwClrjHYgRlD6GccJUFP9#m3c3eCna#RnA8bYISzI1$Qkf3kP2IPGih9PBAKp" +
		"24ho6goXgmZwybSCf$yG3QHvMGLMKk#9T#HUUH7if1i83j81Tb8jf3jv2UobUmXcyb1SeZi" +
		"LEFT9i9N3BIZHjqERUF9CJABJ2Jxo5x62#K1Jmo$CRJ3nB3jLxOKwaSykgvJpo37MScbt4L" +
		"Ph7oXhETG1h7IMzbKt#2uTSqv9gu7Q8LgV4MaCrb2kf5ff9VozJlPHezaVG0veUhHrCCfmr" +
		"Ji0kerAOTGkcp$VsOLSpASb30knDUd$AFfgrMLpnchHwas4wZNKFeowk5ANqmzeee#5j4UH" +
		"pcTV4#TwqzFLhwLAdSJ4aCQaNe#$QQI1DkSLagNFUx$2F$VPomIA7lxyO#pwKDj$x7OflTq" +
		"jaDVdtgvaeEK767plQ$aM9ys2$sF6okKpEIu#dlsChxnx7lCLkCTvTDcWq#zrFRVDYlRRcD" +
		"$s#nRgkZRsEyL$iUc$HVVhKB9CSOvzUzoOIhEq4#Eoc7va$A879A3Si3XtszfcyroarNd#I" +
		"iRhHfFPLblQkjahQoMLS9rAok5fxbmnmfFSE7Nbo$aSyD3RPciCEMdAiCCcIdBPO5yBL$9b" +
		"p9NMJ#HEVAnV2IppTeicI$pPAaiaSMoI1OAxmHPOtfscEMlHaxvHNwNtsIdr$$WwIhxhDfU" +
		"sIF7JEql5btvBjM8phTg26zFtRn12tah5b0le6wy12hfoDkm22w#2KBuMj08UCTh5fasMZ5" +
		"79VdCbS$OFEfvCEu6dUzC0$256AG89S4ANTbqanRCPz2IjgQK1iqu3kCDba5RMyggIASldJ" +
		"9RaSPw6cMEZLJcJwLiRk9IQ3u4yIMg4$2LOBmOm1Tz2Zh$3JQdWj8=");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN37 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 37];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Module
			RETURN2,	// [1] $goal = $Dummy Dummy; returns 'Dummy' although none is marked
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Imports = Imports Import; returns 'Import' although none is marked
			Action.NONE,  	// [4] Imports = 
			RETURN3,	// [5] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] Declarations = Declarations Declaration; returns 'Declaration' although none is marked
			Action.NONE,  	// [7] Declarations = 
			Action.RETURN,	// [8] Declaration = Function_declaration
			Action.RETURN,	// [9] Declaration = Field_declaration
			Action.RETURN,	// [10] Declaration = Type_declaration
			RETURN9,	// [11] Function_declaration = Accessibility Type_name ID LPAREN Parameters RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] Field_declaration = Accessibility Type_name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] Type_declaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] Accessibility = PUBLIC
			Action.NONE,  	// [15] Accessibility = 
			Action.RETURN,	// [16] Type_name = Primitive_type
			Action.RETURN,	// [17] Type_name = Array_type
			Action.RETURN,	// [18] Type_name = ID
			Action.RETURN,	// [19] Primitive_type = VOID
			Action.RETURN,	// [20] Primitive_type = BOOLEAN
			Action.RETURN,	// [21] Primitive_type = INT
			RETURN3,	// [22] Array_type = Primitive_type LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [23] Array_type = Array_type LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [24] Array_type = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [25] Parameters = Parameter Parameter_tail; returns 'Parameter_tail' although none is marked
			Action.NONE,  	// [26] Parameters = 
			RETURN3,	// [27] Parameter_tail = COMMA Parameter Parameter_tail; returns 'Parameter_tail' although none is marked
			Action.NONE,  	// [28] Parameter_tail = 
			RETURN2,	// [29] Parameter = Type_name ID; returns 'ID' although none is marked
			RETURN2,	// [30] Statements = Statement Statements; returns 'Statements' although none is marked
			Action.NONE,  	// [31] Statements = 
			RETURN3,	// [32] Statement = Type_name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [33] Statement = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN7,	// [34] Statement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN5,	// [35] Statement = IF LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN5,	// [36] Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [37] Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [38] Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [39] Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [40] Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [41] Expression = Assignment
			Action.RETURN,	// [42] Expression = RHS_expression
			RETURN3,	// [43] Assignment = LHS_expression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [44] LHS_expression = ID
			Action.RETURN,	// [45] LHS_expression = Array_access
			RETURN4,	// [46] Array_access = LHS_expression LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [47] RHS_expression = Arithmetic_expression
			RETURN3,	// [48] RHS_expression = Arithmetic_expression Comparison_operator Arithmetic_expression; returns 'Arithmetic_expression' although none is marked
			Action.RETURN,	// [49] Comparison_operator = EQEQ
			Action.RETURN,	// [50] Comparison_operator = NEQ
			Action.RETURN,	// [51] Comparison_operator = LT
			Action.RETURN,	// [52] Comparison_operator = LEQ
			Action.RETURN,	// [53] Comparison_operator = GT
			Action.RETURN,	// [54] Comparison_operator = GEQ
			new Action() {	// [55] Arithmetic_expression = Arithmetic_expression Additive_operator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [56] Arithmetic_expression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [57] Additive_operator = PLUS
			Action.RETURN,	// [58] Additive_operator = MINUS
			new Action() {	// [59] Term = Term Multiplicative_operator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [60] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [61] Multiplicative_operator = TIMES
			Action.RETURN,	// [62] Multiplicative_operator = DIV
			Action.RETURN,	// [63] Multiplicative_operator = MOD
			RETURN2,	// [64] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [65] Factor = Primary_expression
			Action.RETURN,	// [66] Primary_expression = LHS_expression
			RETURN4,	// [67] Primary_expression = ID LPAREN Expressions RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [68] Primary_expression = LBRACKET Expression Expression_tail RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [69] Primary_expression = STRING_LITERAL
			Action.RETURN,	// [70] Primary_expression = INT_LITERAL
			Action.RETURN,	// [71] Primary_expression = TRUE
			Action.RETURN,	// [72] Primary_expression = FALSE
			RETURN3,	// [73] Primary_expression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [74] Expressions = Expression Expression_tail; returns 'Expression_tail' although none is marked
			Action.NONE,  	// [75] Expressions = 
			RETURN3,	// [76] Expression_tail = COMMA Expression Expression_tail; returns 'Expression_tail' although none is marked
			Action.NONE,  	// [77] Expression_tail = 
			RETURN37	// [78] Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; returns 'EQL' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
