package parser;

import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LBRACKET = 2;
		static public final short LPAREN = 3;
		static public final short MINUS = 4;
		static public final short STRING_LITERAL = 5;
		static public final short TRUE = 6;
		static public final short FALSE = 7;
		static public final short INT_LITERAL = 8;
		static public final short RPAREN = 9;
		static public final short INT = 10;
		static public final short VOID = 11;
		static public final short BOOLEAN = 12;
		static public final short LCURLY = 13;
		static public final short SEMICOLON = 14;
		static public final short IF = 15;
		static public final short WHILE = 16;
		static public final short RETURN = 17;
		static public final short BREAK = 18;
		static public final short RBRACKET = 19;
		static public final short COMMA = 20;
		static public final short RCURLY = 21;
		static public final short PLUS = 22;
		static public final short TIMES = 23;
		static public final short DIV = 24;
		static public final short MOD = 25;
		static public final short EQL = 26;
		static public final short MODULE = 27;
		static public final short ELSE = 28;
		static public final short PUBLIC = 29;
		static public final short TYPE = 30;
		static public final short IMPORT = 31;
		static public final short EQEQ = 32;
		static public final short NEQ = 33;
		static public final short LEQ = 34;
		static public final short GEQ = 35;
		static public final short LT = 36;
		static public final short GT = 37;
	}
	static public class AltGoals {
		static public final short Dummy = 38;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDc0jyZMKSnt$lUtPnjZapsnYRKSrcDXOjawtSHMXqCwbqbMuKXLAe5XKftP1kT4$wI2f" +
		"9CRULMovHn91BeX8HSldxlSzvzkwSz#oq9dtA#NpV$$$v$$$F$tdUvtrk0vYfU0P3C0BNut" +
		"uCmt0yW8QOWESn7gr5q0wTSGcw8GSkv0L4JYcDX6b7Xifqj5MHxNqY2#t843lIcUrXkzqJG" +
		"MF2x3pXGMEgs35kEsOm2Z00Ds8WUc4qha0FN80dy1JEFmNFnA2UZa4z5mNrvFjvxb0UNqk7" +
		"04jNPRaEDodBRRZ5yVw3jQStBlUhTsb0fYi3B3ShYoEZpFIBkJEWrhq1bWVBorDXkR32Y0Z" +
		"E4gSj4ezW91x5unY5nohTPaNbqj4SYAkHZSPu1vCHXJuucx8gcg0fpl7EDzcXvzqhwhlUeE" +
		"jDnWku1ZtH735u3HvSvHTrhlMKlHYBbt0txi4WxrD#mREu5LaoGsQWl$oASR9Djk5jPOz6V" +
		"rH3TSGY3Y$o5u#Qg8549209jL0FjL47TP6CCt0cpa9zD40Aqf0g7o0J6MY4T3cEyz0CBP2B" +
		"bdWNhT06dT055#9YT6TVh#NRzMNhb#5sz9EFS1Sjzx7DeNW8Js8CdiOasOcNPJkUmwju7Mz" +
		"YAjx2Um3UWC6TmCKr7igL6iwLcCWl5idngaflD7iTmtwxaCe#EoCzTcHhEpAHVGgC3B4Zsz" +
		"YHpfWQvRJhZ8cmOoA3naJRCKbsJ1f7D9sxP0R7in5dH1RdWdSU$1yzbR5q27Z$ibZFAUPsP" +
		"dIVfZmLbKCgZAZ6MUAqnN3zUDTD2bTEPTkigEpxLYsu$xTaH7N6jAACugdPZcUcTxwvjVH#" +
		"rz9w1dUHPbpVkSoLp5MUvnVbVLfjDkUEaC2zmFlqzYAUEQqTmogv#QkZj31Qmja$W$dY#Al" +
		"BtjRW6DJaA2Hm16fnB58u6bQTEAu2AqyivmAe6pmZQrDpKwlAdSnWRGzb4gEi5ZpiQmvhnh" +
		"BiOJbRaKFYQ7EhFB7SYToAMDOtL4yyyF3cOMMUDe8F4UvwK2ivYdGYNKWtqfDq1umE99#C8" +
		"kF8HBAQh27Sbunrv7iobnIHPMGJMKvMaA$90hAG59CloM8od#mcsya6if7yG7QGpOJzCah8" +
		"0NAGxBBwIxc5p297hB8lj8qdVwfT2SOaie$irUyfFd77oVwoCkAqJASzanobdakvaxAhrsT" +
		"QzRB9CIgzTPx3kfxLtnFbz6S2oTDwQzAUIcFAhcGQwQ5zVShgcE4izoE7TBaATMA6wDX5rC" +
		"Ce1n7VTvfUJll3o1p66qwVze#aBweyNs2iwTPrvb5tQNqbzL2jVqKz8aWxI#YBeNoVBAKUI" +
		"#fetrgTFvb4aaGIvsYx7ealBVDJRjNouD$f#ty9tsysAI2zWlZ7#kX3V7Ik4tGEKeTh30LU" +
		"dJSXO8hM1sWvl2mMKxKSuvy3nS7xZ9MwdQ6aBrd5Gf6MCxMlq55dlQCyqQU$6xHjZxNEdNP" +
		"7FMkzb$n5tuu7yvrEh7r6oz7MllJFSc4Q$gL$SbGEos#KH#IG$247$NnRo07PglJDgbIYFH" +
		"#hvoOxalktR53QUlbEribQ#PpwDyBrBTo$XNDH5fAvyeNbeRPArYWvHsUO8H$AQYcM#L8ay" +
		"sI1jduci#LJcIMVU5kLnR98LiXoMIPBPObmnv1lbUSdzTnbvPGVvMVP8xjbez#xy6IGt#tI" +
		"VjadnvHcxVRvlCaQnEJjDepdfad0yz$5Mu19eEu0fRHLVxc6y3OGndk2GS3JtR1fuaDJvYW" +
		"bbxbu9l0yTH7m7c3oFBO0xuOkJJWnIQYMBYrDthGCHMFQ6b1QfBCVrkqhI$qFW54kcVHbKZ" +
		"RJPB2SGPdZGnhpfr4sL8He30Skta5D0juIN0IyuzT7nvEDKua8");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN7 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 7];
		}
	};

	static final Action RETURN5 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 5];
		}
	};

	static final Action RETURN37 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 37];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Module
			RETURN2,	// [1] $goal = $Dummy Dummy; returns 'Dummy' although none is marked
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Imports = Imports Import; returns 'Import' although none is marked
			Action.NONE,  	// [4] Imports = 
			RETURN3,	// [5] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [6] Declarations = Declarations Declaration; returns 'Declaration' although none is marked
			Action.NONE,  	// [7] Declarations = 
			Action.RETURN,	// [8] Declaration = Function_declaration
			Action.RETURN,	// [9] Declaration = Field_declaration
			Action.RETURN,	// [10] Declaration = Type_declaration
			RETURN9,	// [11] Function_declaration = Accessibility Type_name ID LPAREN Parameters RPAREN LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [12] Field_declaration = Accessibility Type_name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [13] Type_declaration = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [14] Accessibility = PUBLIC
			Action.NONE,  	// [15] Accessibility = 
			Action.RETURN,	// [16] Type_name = Primitive_type
			Action.RETURN,	// [17] Type_name = Array_type
			Action.RETURN,	// [18] Type_name = ID
			Action.RETURN,	// [19] Primitive_type = VOID
			Action.RETURN,	// [20] Primitive_type = BOOLEAN
			Action.RETURN,	// [21] Primitive_type = INT
			RETURN3,	// [22] Array_type = Primitive_type LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [23] Array_type = Array_type LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [24] Array_type = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN2,	// [25] Parameters = Parameter Parameter_tail; returns 'Parameter_tail' although none is marked
			Action.NONE,  	// [26] Parameters = 
			RETURN3,	// [27] Parameter_tail = COMMA Parameter Parameter_tail; returns 'Parameter_tail' although none is marked
			Action.NONE,  	// [28] Parameter_tail = 
			RETURN2,	// [29] Parameter = Type_name ID; returns 'ID' although none is marked
			RETURN2,	// [30] Statements = Statements Statement; returns 'Statement' although none is marked
			Action.NONE,  	// [31] Statements = 
			RETURN3,	// [32] Statement = Type_name ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [33] Statement = LCURLY Statements RCURLY; returns 'RCURLY' although none is marked
			RETURN7,	// [34] Statement = IF LPAREN Expression RPAREN Statement ELSE Statement; returns 'Statement' although none is marked
			RETURN2,	// [35] Statement = IF Statement; returns 'Statement' although none is marked
			RETURN5,	// [36] Statement = WHILE LPAREN Expression RPAREN Statement; returns 'Statement' although none is marked
			RETURN2,	// [37] Statement = BREAK SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN3,	// [38] Statement = RETURN Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [39] Statement = RETURN SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [40] Statement = Expression SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [41] Expression = Assignment
			Action.RETURN,	// [42] Expression = RHS_expression
			RETURN3,	// [43] Assignment = LHS_expression EQL Expression; returns 'Expression' although none is marked
			Action.RETURN,	// [44] LHS_expression = ID
			Action.RETURN,	// [45] LHS_expression = Array_access
			RETURN4,	// [46] Array_access = LHS_expression LBRACKET Expression RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [47] RHS_expression = Arithmetic_expression
			RETURN3,	// [48] RHS_expression = Arithmetic_expression Comparison_operator Arithmetic_expression; returns 'Arithmetic_expression' although none is marked
			Action.RETURN,	// [49] Comparison_operator = EQEQ
			Action.RETURN,	// [50] Comparison_operator = NEQ
			Action.RETURN,	// [51] Comparison_operator = LT
			Action.RETURN,	// [52] Comparison_operator = LEQ
			Action.RETURN,	// [53] Comparison_operator = GT
			Action.RETURN,	// [54] Comparison_operator = GEQ
			new Action() {	// [55] Arithmetic_expression = Arithmetic_expression Additive_operator Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [56] Arithmetic_expression = Term
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [57] Additive_operator = PLUS
			Action.RETURN,	// [58] Additive_operator = MINUS
			new Action() {	// [59] Term = Term Multiplicative_operator Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					((ArrayList) _symbols[offset + 1].value).add(_symbols[offset + 3]); return _symbols[offset + 1];
				}
			},
			new Action() {	// [60] Term = Factor
				public Symbol reduce(Symbol[] _symbols, int offset) {
					ArrayList lst = new ArrayList(); lst.add(_symbols[offset + 1]); return new Symbol(lst);
				}
			},
			Action.RETURN,	// [61] Multiplicative_operator = TIMES
			Action.RETURN,	// [62] Multiplicative_operator = DIV
			Action.RETURN,	// [63] Multiplicative_operator = MOD
			RETURN2,	// [64] Factor = MINUS Factor; returns 'Factor' although none is marked
			Action.RETURN,	// [65] Factor = Primary_expression
			Action.RETURN,	// [66] Primary_expression = LHS_expression
			RETURN4,	// [67] Primary_expression = ID LPAREN Expressions RPAREN; returns 'RPAREN' although none is marked
			RETURN4,	// [68] Primary_expression = LBRACKET Expression Expression_tail RBRACKET; returns 'RBRACKET' although none is marked
			Action.RETURN,	// [69] Primary_expression = STRING_LITERAL
			Action.RETURN,	// [70] Primary_expression = INT_LITERAL
			Action.RETURN,	// [71] Primary_expression = TRUE
			Action.RETURN,	// [72] Primary_expression = FALSE
			RETURN3,	// [73] Primary_expression = LPAREN Expression RPAREN; returns 'RPAREN' although none is marked
			RETURN2,	// [74] Expressions = Expression Expression_tail; returns 'Expression_tail' although none is marked
			Action.NONE,  	// [75] Expressions = 
			RETURN3,	// [76] Expression_tail = COMMA Expression Expression_tail; returns 'Expression_tail' although none is marked
			Action.NONE,  	// [77] Expression_tail = 
			RETURN37	// [78] Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; returns 'EQL' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
